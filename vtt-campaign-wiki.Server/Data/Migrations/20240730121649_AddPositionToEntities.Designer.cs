// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vtt_campaign_wiki.Server.Data;

#nullable disable

namespace vtt_campaign_wiki.Server.Data.Migrations
{
    [DbContext(typeof(VttCampaignWikiDbContext))]
    [Migration("20240730121649_AddPositionToEntities")]
    partial class AddPositionToEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Campaign.CampaignPlayerEntity", b =>
                {
                    b.Property<int>("CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDM")
                        .HasColumnType("INTEGER");

                    b.HasKey("CampaignId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("CampaignPlayerEntity");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Image.ItemImageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Player.PlayerEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Session.SessionPlayerEntity", b =>
                {
                    b.Property<int>("SessionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("SessionId", "PlayerId");

                    b.HasIndex("PlayerId");

                    b.ToTable("SessionPlayerEntity");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Shared.ItemBaseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AuthorId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("TEXT");

                    b.Property<string>("ExternalLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Position")
                        .HasColumnType("decimal(18,5)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("Position");

                    b.ToTable("ItemBaseEntity");

                    b.HasDiscriminator().HasValue("ItemBaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Campaign.CampaignEntity", b =>
                {
                    b.HasBaseType("vtt_campaign_wiki.Server.Features.Shared.ItemBaseEntity");

                    b.HasDiscriminator().HasValue("CampaignEntity");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Campaign.CampaignItemEntity", b =>
                {
                    b.HasBaseType("vtt_campaign_wiki.Server.Features.Shared.ItemBaseEntity");

                    b.Property<int>("CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ParentEntityId")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ParentEntityId");

                    b.ToTable("ItemBaseEntity", t =>
                        {
                            t.Property("CampaignId")
                                .HasColumnName("CampaignItemEntity_CampaignId");
                        });

                    b.HasDiscriminator().HasValue("CampaignItemEntity");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Session.SessionEntity", b =>
                {
                    b.HasBaseType("vtt_campaign_wiki.Server.Features.Shared.ItemBaseEntity");

                    b.Property<int>("CampaignId")
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasIndex("CampaignId");

                    b.HasDiscriminator().HasValue("SessionEntity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("vtt_campaign_wiki.Server.Features.Player.PlayerEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("vtt_campaign_wiki.Server.Features.Player.PlayerEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vtt_campaign_wiki.Server.Features.Player.PlayerEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("vtt_campaign_wiki.Server.Features.Player.PlayerEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Campaign.CampaignPlayerEntity", b =>
                {
                    b.HasOne("vtt_campaign_wiki.Server.Features.Campaign.CampaignEntity", "Campaign")
                        .WithMany("Players")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vtt_campaign_wiki.Server.Features.Player.PlayerEntity", "Player")
                        .WithMany("Campaigns")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Session.SessionPlayerEntity", b =>
                {
                    b.HasOne("vtt_campaign_wiki.Server.Features.Player.PlayerEntity", "Player")
                        .WithMany("Sessions")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vtt_campaign_wiki.Server.Features.Session.SessionEntity", "Session")
                        .WithMany("Players")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Shared.ItemBaseEntity", b =>
                {
                    b.HasOne("vtt_campaign_wiki.Server.Features.Player.PlayerEntity", "Author")
                        .WithMany("Items")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("vtt_campaign_wiki.Server.Features.Image.ItemImageEntity", "Image")
                        .WithOne("Entity")
                        .HasForeignKey("vtt_campaign_wiki.Server.Features.Shared.ItemBaseEntity", "ImageId");

                    b.Navigation("Author");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Campaign.CampaignItemEntity", b =>
                {
                    b.HasOne("vtt_campaign_wiki.Server.Features.Campaign.CampaignEntity", "Campaign")
                        .WithMany("Items")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vtt_campaign_wiki.Server.Features.Campaign.CampaignItemEntity", "ParentEntity")
                        .WithMany("Children")
                        .HasForeignKey("ParentEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Campaign");

                    b.Navigation("ParentEntity");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Session.SessionEntity", b =>
                {
                    b.HasOne("vtt_campaign_wiki.Server.Features.Campaign.CampaignEntity", "Campaign")
                        .WithMany("Sessions")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Image.ItemImageEntity", b =>
                {
                    b.Navigation("Entity");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Player.PlayerEntity", b =>
                {
                    b.Navigation("Campaigns");

                    b.Navigation("Items");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Campaign.CampaignEntity", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Players");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Campaign.CampaignItemEntity", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("vtt_campaign_wiki.Server.Features.Session.SessionEntity", b =>
                {
                    b.Navigation("Players");
                });
#pragma warning restore 612, 618
        }
    }
}
